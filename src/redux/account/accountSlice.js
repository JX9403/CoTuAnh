import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { callUpdateInfo } from "../../services/api";
import axios from "axios";
// import { setClientToken } from "../../utils/axios";

const initialState = {
  // biến check xem người dùng đã đăng nhập hay chưa
  isAuthenticated: false,
  isLoading: true,
  user: {
    address: "",
    avatar: "",
    date_of_birth: "",
    email: "",
    full_name: "",
    id: "",
    phone_number: "",
    role: "",
  },
};

//////////////////////////////////////////////////////////////////////////////////////////////
export const doUpdateAccountAction = createAsyncThunk(
  "account/update",
  async (updatedUserData, thunkAPI) => {
    try {
      
      console.log("check data redux nhận được",updatedUserData);

      const response = await callUpdateInfo(updatedUserData);
      // console.log("check data sau khi call api", response.data.data);

      
      if (response.status === 200) {
        console.log("check data return từ redux", response.data.data);
        return response.data.data; // Return updated user data
      } else {
        return thunkAPI.rejectWithValue("Cập nhật thất bại!"); // Handle error
      }
    } catch (error) {
      console.error("Error updating user information:", error);
      return thunkAPI.rejectWithValue("Đã có lỗi xảy ra!"); // Handle generic errors
    }
  }
);

////////////////////////////////////////////////////////////////////////////////////////////////
export const accountSlide = createSlice({
  name: "account",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doLoginAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true;
      state.isLoading = false;
      state.user = action.payload;
    },
    doGetAccountAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated = true;
      state.isLoading = false;
      // console.log(action.payload)
      state.user = action.payload;
    },

    doLogoutAction: (state, action) => {
      localStorage.removeItem("access_token");
      state.isAuthenticated = false;
      state.user = {
        address: "",
        avatar: "",
        date_of_birth: "",
        email: "",
        full_name: "",
        id: "",
        phone_number: "",
        role: "",
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(doUpdateAccountAction.pending, (state, action) => {
        // Handle pending state (optional)
      })
      .addCase(doUpdateAccountAction.fulfilled, (state, action) => {
        // console.log(action)
        state.user = action.payload; // Update user state with updated data
        // console.log(action.payload)
      })
      .addCase(doUpdateAccountAction.rejected, (state, action) => {
        // Handle error state (display error message)
      });
  },
});

export const { doLoginAction, doGetAccountAction, doLogoutAction } =
  accountSlide.actions;

export default accountSlide.reducer;
